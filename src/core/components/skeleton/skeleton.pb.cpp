// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skeleton.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "skeleton.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace hoolai {
namespace skeleton {

void protobuf_ShutdownFile_skeleton_2eproto() {
  delete skeleton::default_instance_;
  delete skeleton_bone::default_instance_;
  delete skeleton_animation::default_instance_;
  delete skeleton_animation_bone::default_instance_;
  delete skeleton_animation_bone_frame::default_instance_;
  delete skeleton_container::default_instance_;
  delete skeleton_container_image::default_instance_;
  delete skeleton_image::default_instance_;
  delete skeleton_position::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_skeleton_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_skeleton_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  skeleton::default_instance_ = new skeleton();
  skeleton_bone::default_instance_ = new skeleton_bone();
  skeleton_animation::default_instance_ = new skeleton_animation();
  skeleton_animation_bone::default_instance_ = new skeleton_animation_bone();
  skeleton_animation_bone_frame::default_instance_ = new skeleton_animation_bone_frame();
  skeleton_container::default_instance_ = new skeleton_container();
  skeleton_container_image::default_instance_ = new skeleton_container_image();
  skeleton_image::default_instance_ = new skeleton_image();
  skeleton_position::default_instance_ = new skeleton_position();
  skeleton::default_instance_->InitAsDefaultInstance();
  skeleton_bone::default_instance_->InitAsDefaultInstance();
  skeleton_animation::default_instance_->InitAsDefaultInstance();
  skeleton_animation_bone::default_instance_->InitAsDefaultInstance();
  skeleton_animation_bone_frame::default_instance_->InitAsDefaultInstance();
  skeleton_container::default_instance_->InitAsDefaultInstance();
  skeleton_container_image::default_instance_->InitAsDefaultInstance();
  skeleton_image::default_instance_->InitAsDefaultInstance();
  skeleton_position::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_skeleton_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_skeleton_2eproto_once_);
void protobuf_AddDesc_skeleton_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_skeleton_2eproto_once_,
                 &protobuf_AddDesc_skeleton_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_skeleton_2eproto {
  StaticDescriptorInitializer_skeleton_2eproto() {
    protobuf_AddDesc_skeleton_2eproto();
  }
} static_descriptor_initializer_skeleton_2eproto_;
#endif
bool blendmode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int skeleton_bone::kNameFieldNumber;
const int skeleton_bone::kParentFieldNumber;
const int skeleton_bone::kXFieldNumber;
const int skeleton_bone::kYFieldNumber;
#endif  // !_MSC_VER

skeleton_bone::skeleton_bone()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton_bone::InitAsDefaultInstance() {
}

skeleton_bone::skeleton_bone(const skeleton_bone& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton_bone::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton_bone::~skeleton_bone() {
  SharedDtor();
}

void skeleton_bone::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton_bone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton_bone& skeleton_bone::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton_bone* skeleton_bone::default_instance_ = NULL;

skeleton_bone* skeleton_bone::New() const {
  return new skeleton_bone;
}

void skeleton_bone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_parent()) {
      if (parent_ != &::google::protobuf::internal::kEmptyString) {
        parent_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton_bone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parent;
        break;
      }

      // optional string parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // optional float x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // optional float y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton_bone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parent(), output);
  }

  // optional float x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

}

int skeleton_bone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent());
    }

    // optional float x = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton_bone::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton_bone*>(&from));
}

void skeleton_bone::MergeFrom(const skeleton_bone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void skeleton_bone::CopyFrom(const skeleton_bone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_bone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void skeleton_bone::Swap(skeleton_bone* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(parent_, other->parent_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton_bone::GetTypeName() const {
  return "hoolai.skeleton.skeleton.bone";
}


void skeleton_bone::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton_bone\n");
  printf("{\n");
  printf("name : %s\n", name().c_str());
  printf("parent : %s\n", parent().c_str());
  printf("x : %f\n", x());
  printf("y : %f\n", y());
  printf("}\n");
#endif
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int skeleton_animation_bone_frame::kDurationFieldNumber;
const int skeleton_animation_bone_frame::kHideFieldNumber;
const int skeleton_animation_bone_frame::kXFieldNumber;
const int skeleton_animation_bone_frame::kYFieldNumber;
const int skeleton_animation_bone_frame::kSkewXFieldNumber;
const int skeleton_animation_bone_frame::kSkewYFieldNumber;
const int skeleton_animation_bone_frame::kScaleXFieldNumber;
const int skeleton_animation_bone_frame::kScaleYFieldNumber;
const int skeleton_animation_bone_frame::kContainerFieldNumber;
const int skeleton_animation_bone_frame::kTweenEasingFieldNumber;
const int skeleton_animation_bone_frame::kAlphaPercentFieldNumber;
const int skeleton_animation_bone_frame::kRedPercentFieldNumber;
const int skeleton_animation_bone_frame::kGreenPercentFieldNumber;
const int skeleton_animation_bone_frame::kBluePercentFieldNumber;
const int skeleton_animation_bone_frame::kAlphaAmountFieldNumber;
const int skeleton_animation_bone_frame::kRedAmountFieldNumber;
const int skeleton_animation_bone_frame::kGreenAmountFieldNumber;
const int skeleton_animation_bone_frame::kBlueAmountFieldNumber;
const int skeleton_animation_bone_frame::kBrightnessFieldNumber;
const int skeleton_animation_bone_frame::kBlendFieldNumber;
#endif  // !_MSC_VER

skeleton_animation_bone_frame::skeleton_animation_bone_frame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton_animation_bone_frame::InitAsDefaultInstance() {
}

skeleton_animation_bone_frame::skeleton_animation_bone_frame(const skeleton_animation_bone_frame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton_animation_bone_frame::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  hide_ = false;
  x_ = 0;
  y_ = 0;
  skewx_ = 0;
  skewy_ = 0;
  scalex_ = 1;
  scaley_ = 1;
  container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tweeneasing_ = 0;
  alphapercent_ = 1;
  redpercent_ = 1;
  greenpercent_ = 1;
  bluepercent_ = 1;
  alphaamount_ = 0;
  redamount_ = 0;
  greenamount_ = 0;
  blueamount_ = 0;
  brightness_ = 1;
  blend_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton_animation_bone_frame::~skeleton_animation_bone_frame() {
  SharedDtor();
}

void skeleton_animation_bone_frame::SharedDtor() {
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    delete container_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton_animation_bone_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton_animation_bone_frame& skeleton_animation_bone_frame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton_animation_bone_frame* skeleton_animation_bone_frame::default_instance_ = NULL;

skeleton_animation_bone_frame* skeleton_animation_bone_frame::New() const {
  return new skeleton_animation_bone_frame;
}

void skeleton_animation_bone_frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0;
    hide_ = false;
    x_ = 0;
    y_ = 0;
    skewx_ = 0;
    skewy_ = 0;
    scalex_ = 1;
    scaley_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_container()) {
      if (container_ != &::google::protobuf::internal::kEmptyString) {
        container_->clear();
      }
    }
    tweeneasing_ = 0;
    alphapercent_ = 1;
    redpercent_ = 1;
    greenpercent_ = 1;
    bluepercent_ = 1;
    alphaamount_ = 0;
    redamount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    greenamount_ = 0;
    blueamount_ = 0;
    brightness_ = 1;
    blend_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton_animation_bone_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hide;
        break;
      }

      // optional bool hide = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_)));
          set_has_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // optional float x = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // optional float y = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_skewX;
        break;
      }

      // optional float skewX = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skewX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skewx_)));
          set_has_skewx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_skewY;
        break;
      }

      // optional float skewY = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skewY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skewy_)));
          set_has_skewy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_scaleX;
        break;
      }

      // optional float scaleX = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalex_)));
          set_has_scalex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_scaleY;
        break;
      }

      // optional float scaleY = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaley_)));
          set_has_scaley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_container;
        break;
      }

      // optional string container = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_tweenEasing;
        break;
      }

      // optional float tweenEasing = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tweenEasing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tweeneasing_)));
          set_has_tweeneasing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_alphaPercent;
        break;
      }

      // optional float alphaPercent = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alphaPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alphapercent_)));
          set_has_alphapercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_redPercent;
        break;
      }

      // optional float redPercent = 12 [default = 1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_redPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &redpercent_)));
          set_has_redpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_greenPercent;
        break;
      }

      // optional float greenPercent = 13 [default = 1];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_greenPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &greenpercent_)));
          set_has_greenpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_bluePercent;
        break;
      }

      // optional float bluePercent = 14 [default = 1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bluePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bluepercent_)));
          set_has_bluepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_alphaAmount;
        break;
      }

      // optional float alphaAmount = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alphaAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alphaamount_)));
          set_has_alphaamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_redAmount;
        break;
      }

      // optional float redAmount = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_redAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &redamount_)));
          set_has_redamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_greenAmount;
        break;
      }

      // optional float greenAmount = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_greenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &greenamount_)));
          set_has_greenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_blueAmount;
        break;
      }

      // optional float blueAmount = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blueAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blueamount_)));
          set_has_blueamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_brightness;
        break;
      }

      // optional float brightness = 19 [default = 1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_brightness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brightness_)));
          set_has_brightness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_blend;
        break;
      }

      // optional .hoolai.skeleton.blendmode blend = 20 [default = normal];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blend:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hoolai::skeleton::blendmode_IsValid(value)) {
            set_blend(static_cast< ::hoolai::skeleton::blendmode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton_animation_bone_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional bool hide = 2 [default = false];
  if (has_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide(), output);
  }

  // optional float x = 3 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float skewX = 5 [default = 0];
  if (has_skewx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->skewx(), output);
  }

  // optional float skewY = 6 [default = 0];
  if (has_skewy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->skewy(), output);
  }

  // optional float scaleX = 7 [default = 1];
  if (has_scalex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scalex(), output);
  }

  // optional float scaleY = 8 [default = 1];
  if (has_scaley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->scaley(), output);
  }

  // optional string container = 9;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->container(), output);
  }

  // optional float tweenEasing = 10 [default = 0];
  if (has_tweeneasing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tweeneasing(), output);
  }

  // optional float alphaPercent = 11 [default = 1];
  if (has_alphapercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->alphapercent(), output);
  }

  // optional float redPercent = 12 [default = 1];
  if (has_redpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->redpercent(), output);
  }

  // optional float greenPercent = 13 [default = 1];
  if (has_greenpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->greenpercent(), output);
  }

  // optional float bluePercent = 14 [default = 1];
  if (has_bluepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->bluepercent(), output);
  }

  // optional float alphaAmount = 15 [default = 0];
  if (has_alphaamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->alphaamount(), output);
  }

  // optional float redAmount = 16 [default = 0];
  if (has_redamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->redamount(), output);
  }

  // optional float greenAmount = 17 [default = 0];
  if (has_greenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->greenamount(), output);
  }

  // optional float blueAmount = 18 [default = 0];
  if (has_blueamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->blueamount(), output);
  }

  // optional float brightness = 19 [default = 1];
  if (has_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->brightness(), output);
  }

  // optional .hoolai.skeleton.blendmode blend = 20 [default = normal];
  if (has_blend()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->blend(), output);
  }

}

int skeleton_animation_bone_frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional bool hide = 2 [default = false];
    if (has_hide()) {
      total_size += 1 + 1;
    }

    // optional float x = 3 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 4 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float skewX = 5 [default = 0];
    if (has_skewx()) {
      total_size += 1 + 4;
    }

    // optional float skewY = 6 [default = 0];
    if (has_skewy()) {
      total_size += 1 + 4;
    }

    // optional float scaleX = 7 [default = 1];
    if (has_scalex()) {
      total_size += 1 + 4;
    }

    // optional float scaleY = 8 [default = 1];
    if (has_scaley()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string container = 9;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container());
    }

    // optional float tweenEasing = 10 [default = 0];
    if (has_tweeneasing()) {
      total_size += 1 + 4;
    }

    // optional float alphaPercent = 11 [default = 1];
    if (has_alphapercent()) {
      total_size += 1 + 4;
    }

    // optional float redPercent = 12 [default = 1];
    if (has_redpercent()) {
      total_size += 1 + 4;
    }

    // optional float greenPercent = 13 [default = 1];
    if (has_greenpercent()) {
      total_size += 1 + 4;
    }

    // optional float bluePercent = 14 [default = 1];
    if (has_bluepercent()) {
      total_size += 1 + 4;
    }

    // optional float alphaAmount = 15 [default = 0];
    if (has_alphaamount()) {
      total_size += 1 + 4;
    }

    // optional float redAmount = 16 [default = 0];
    if (has_redamount()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float greenAmount = 17 [default = 0];
    if (has_greenamount()) {
      total_size += 2 + 4;
    }

    // optional float blueAmount = 18 [default = 0];
    if (has_blueamount()) {
      total_size += 2 + 4;
    }

    // optional float brightness = 19 [default = 1];
    if (has_brightness()) {
      total_size += 2 + 4;
    }

    // optional .hoolai.skeleton.blendmode blend = 20 [default = normal];
    if (has_blend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blend());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton_animation_bone_frame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton_animation_bone_frame*>(&from));
}

void skeleton_animation_bone_frame::MergeFrom(const skeleton_animation_bone_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_hide()) {
      set_hide(from.hide());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_skewx()) {
      set_skewx(from.skewx());
    }
    if (from.has_skewy()) {
      set_skewy(from.skewy());
    }
    if (from.has_scalex()) {
      set_scalex(from.scalex());
    }
    if (from.has_scaley()) {
      set_scaley(from.scaley());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_tweeneasing()) {
      set_tweeneasing(from.tweeneasing());
    }
    if (from.has_alphapercent()) {
      set_alphapercent(from.alphapercent());
    }
    if (from.has_redpercent()) {
      set_redpercent(from.redpercent());
    }
    if (from.has_greenpercent()) {
      set_greenpercent(from.greenpercent());
    }
    if (from.has_bluepercent()) {
      set_bluepercent(from.bluepercent());
    }
    if (from.has_alphaamount()) {
      set_alphaamount(from.alphaamount());
    }
    if (from.has_redamount()) {
      set_redamount(from.redamount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_greenamount()) {
      set_greenamount(from.greenamount());
    }
    if (from.has_blueamount()) {
      set_blueamount(from.blueamount());
    }
    if (from.has_brightness()) {
      set_brightness(from.brightness());
    }
    if (from.has_blend()) {
      set_blend(from.blend());
    }
  }
}

void skeleton_animation_bone_frame::CopyFrom(const skeleton_animation_bone_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_animation_bone_frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void skeleton_animation_bone_frame::Swap(skeleton_animation_bone_frame* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(hide_, other->hide_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(skewx_, other->skewx_);
    std::swap(skewy_, other->skewy_);
    std::swap(scalex_, other->scalex_);
    std::swap(scaley_, other->scaley_);
    std::swap(container_, other->container_);
    std::swap(tweeneasing_, other->tweeneasing_);
    std::swap(alphapercent_, other->alphapercent_);
    std::swap(redpercent_, other->redpercent_);
    std::swap(greenpercent_, other->greenpercent_);
    std::swap(bluepercent_, other->bluepercent_);
    std::swap(alphaamount_, other->alphaamount_);
    std::swap(redamount_, other->redamount_);
    std::swap(greenamount_, other->greenamount_);
    std::swap(blueamount_, other->blueamount_);
    std::swap(brightness_, other->brightness_);
    std::swap(blend_, other->blend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton_animation_bone_frame::GetTypeName() const {
  return "hoolai.skeleton.skeleton.animation.bone.frame";
}


void skeleton_animation_bone_frame::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton_animation_bone_frame\n");
  printf("{\n");
  printf("duration : %d\n", duration());
  printf("hide : %d\n", hide());
  printf("x : %f\n", x());
  printf("y : %f\n", y());
  printf("skewx : %f\n", skewx());
  printf("skewy : %f\n", skewy());
  printf("scalex : %f\n", scalex());
  printf("scaley : %f\n", scaley());
  printf("container : %s\n", container().c_str());
  printf("tweeneasing : %f\n", tweeneasing());
  printf("alphapercent : %f\n", alphapercent());
  printf("redpercent : %f\n", redpercent());
  printf("greenpercent : %f\n", greenpercent());
  printf("bluepercent : %f\n", bluepercent());
  printf("alphaamount : %f\n", alphaamount());
  printf("redamount : %f\n", redamount());
  printf("greenamount : %f\n", greenamount());
  printf("blueamount : %f\n", blueamount());
  printf("brightness : %f\n", brightness());
  printf("blend : %d\n", blend());
  printf("}\n");
#endif
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int skeleton_animation_bone::kNameFieldNumber;
const int skeleton_animation_bone::kFramesFieldNumber;
const int skeleton_animation_bone::kDelayFieldNumber;
const int skeleton_animation_bone::kScaleFieldNumber;
#endif  // !_MSC_VER

skeleton_animation_bone::skeleton_animation_bone()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton_animation_bone::InitAsDefaultInstance() {
}

skeleton_animation_bone::skeleton_animation_bone(const skeleton_animation_bone& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton_animation_bone::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delay_ = 0;
  scale_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton_animation_bone::~skeleton_animation_bone() {
  SharedDtor();
}

void skeleton_animation_bone::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton_animation_bone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton_animation_bone& skeleton_animation_bone::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton_animation_bone* skeleton_animation_bone::default_instance_ = NULL;

skeleton_animation_bone* skeleton_animation_bone::New() const {
  return new skeleton_animation_bone;
}

void skeleton_animation_bone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    delay_ = 0;
    scale_ = 1;
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton_animation_bone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }

      // repeated .hoolai.skeleton.skeleton.animation.bone.frame frames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectTag(29)) goto parse_delay;
        break;
      }

      // optional float delay = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_scale;
        break;
      }

      // optional float scale = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton_animation_bone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .hoolai.skeleton.skeleton.animation.bone.frame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->frames(i), output);
  }

  // optional float delay = 3 [default = 0];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->delay(), output);
  }

  // optional float scale = 4 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scale(), output);
  }

}

int skeleton_animation_bone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float delay = 3 [default = 0];
    if (has_delay()) {
      total_size += 1 + 4;
    }

    // optional float scale = 4 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  // repeated .hoolai.skeleton.skeleton.animation.bone.frame frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton_animation_bone::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton_animation_bone*>(&from));
}

void skeleton_animation_bone::MergeFrom(const skeleton_animation_bone& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
}

void skeleton_animation_bone::CopyFrom(const skeleton_animation_bone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_animation_bone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void skeleton_animation_bone::Swap(skeleton_animation_bone* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    frames_.Swap(&other->frames_);
    std::swap(delay_, other->delay_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton_animation_bone::GetTypeName() const {
  return "hoolai.skeleton.skeleton.animation.bone";
}


void skeleton_animation_bone::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton_animation_bone\n");
  printf("{\n");
  printf("name : %s\n", name().c_str());
  printf("frames : [\n");
  for(int i = 0; i < frames_size(); ++i) {
    frames(i).printDebugInfo();
  }
  printf("]\n");
  printf("delay : %f\n", delay());
  printf("scale : %f\n", scale());
  printf("}\n");
#endif
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int skeleton_animation::kNameFieldNumber;
const int skeleton_animation::kDurationFieldNumber;
const int skeleton_animation::kTweentimeFieldNumber;
const int skeleton_animation::kLoopFieldNumber;
const int skeleton_animation::kBonesFieldNumber;
#endif  // !_MSC_VER

skeleton_animation::skeleton_animation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton_animation::InitAsDefaultInstance() {
}

skeleton_animation::skeleton_animation(const skeleton_animation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton_animation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0;
  tweentime_ = 0;
  loop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton_animation::~skeleton_animation() {
  SharedDtor();
}

void skeleton_animation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton_animation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton_animation& skeleton_animation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton_animation* skeleton_animation::default_instance_ = NULL;

skeleton_animation* skeleton_animation::New() const {
  return new skeleton_animation;
}

void skeleton_animation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    duration_ = 0;
    tweentime_ = 0;
    loop_ = false;
  }
  bones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton_animation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // required int32 duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tweentime;
        break;
      }

      // optional int32 tweentime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tweentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tweentime_)));
          set_has_tweentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loop;
        break;
      }

      // optional bool loop = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loop_)));
          set_has_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bones;
        break;
      }

      // repeated .hoolai.skeleton.skeleton.animation.bone bones = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bones;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton_animation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional int32 tweentime = 3 [default = 0];
  if (has_tweentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tweentime(), output);
  }

  // optional bool loop = 4 [default = false];
  if (has_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->loop(), output);
  }

  // repeated .hoolai.skeleton.skeleton.animation.bone bones = 5;
  for (int i = 0; i < this->bones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->bones(i), output);
  }

}

int skeleton_animation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 tweentime = 3 [default = 0];
    if (has_tweentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tweentime());
    }

    // optional bool loop = 4 [default = false];
    if (has_loop()) {
      total_size += 1 + 1;
    }

  }
  // repeated .hoolai.skeleton.skeleton.animation.bone bones = 5;
  total_size += 1 * this->bones_size();
  for (int i = 0; i < this->bones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bones(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton_animation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton_animation*>(&from));
}

void skeleton_animation::MergeFrom(const skeleton_animation& from) {
  GOOGLE_CHECK_NE(&from, this);
  bones_.MergeFrom(from.bones_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_tweentime()) {
      set_tweentime(from.tweentime());
    }
    if (from.has_loop()) {
      set_loop(from.loop());
    }
  }
}

void skeleton_animation::CopyFrom(const skeleton_animation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_animation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < bones_size(); i++) {
    if (!this->bones(i).IsInitialized()) return false;
  }
  return true;
}

void skeleton_animation::Swap(skeleton_animation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(duration_, other->duration_);
    std::swap(tweentime_, other->tweentime_);
    std::swap(loop_, other->loop_);
    bones_.Swap(&other->bones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton_animation::GetTypeName() const {
  return "hoolai.skeleton.skeleton.animation";
}


void skeleton_animation::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton_animation\n");
  printf("{\n");
  printf("name : %s\n", name().c_str());
  printf("duration : %d\n", duration());
  printf("tweentime : %d\n", tweentime());
  printf("loop : %d\n", loop());
  printf("bones : [\n");
  for(int i = 0; i < bones_size(); ++i) {
    bones(i).printDebugInfo();
  }
  printf("]\n");
  printf("}\n");
#endif
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int skeleton_container_image::kNameFieldNumber;
const int skeleton_container_image::kXFieldNumber;
const int skeleton_container_image::kYFieldNumber;
#endif  // !_MSC_VER

skeleton_container_image::skeleton_container_image()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton_container_image::InitAsDefaultInstance() {
}

skeleton_container_image::skeleton_container_image(const skeleton_container_image& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton_container_image::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton_container_image::~skeleton_container_image() {
  SharedDtor();
}

void skeleton_container_image::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton_container_image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton_container_image& skeleton_container_image::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton_container_image* skeleton_container_image::default_instance_ = NULL;

skeleton_container_image* skeleton_container_image::New() const {
  return new skeleton_container_image;
}

void skeleton_container_image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton_container_image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton_container_image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

}

int skeleton_container_image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton_container_image::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton_container_image*>(&from));
}

void skeleton_container_image::MergeFrom(const skeleton_container_image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void skeleton_container_image::CopyFrom(const skeleton_container_image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_container_image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void skeleton_container_image::Swap(skeleton_container_image* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton_container_image::GetTypeName() const {
  return "hoolai.skeleton.skeleton.container.image";
}


void skeleton_container_image::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton_container_image\n");
  printf("{\n");
  printf("name : %s\n", name().c_str());
  printf("x : %f\n", x());
  printf("y : %f\n", y());
  printf("}\n");
#endif
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int skeleton_container::kNameFieldNumber;
const int skeleton_container::kImagesFieldNumber;
const int skeleton_container::kImageindexFieldNumber;
#endif  // !_MSC_VER

skeleton_container::skeleton_container()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton_container::InitAsDefaultInstance() {
}

skeleton_container::skeleton_container(const skeleton_container& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton_container::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton_container::~skeleton_container() {
  SharedDtor();
}

void skeleton_container::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton_container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton_container& skeleton_container::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton_container* skeleton_container::default_instance_ = NULL;

skeleton_container* skeleton_container::New() const {
  return new skeleton_container;
}

void skeleton_container::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    imageindex_ = 0;
  }
  images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton_container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_images;
        break;
      }

      // repeated .hoolai.skeleton.skeleton.container.image images = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_images;
        if (input->ExpectTag(24)) goto parse_imageindex;
        break;
      }

      // optional int32 imageindex = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageindex_)));
          set_has_imageindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton_container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .hoolai.skeleton.skeleton.container.image images = 2;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->images(i), output);
  }

  // optional int32 imageindex = 3 [default = 0];
  if (has_imageindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imageindex(), output);
  }

}

int skeleton_container::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 imageindex = 3 [default = 0];
    if (has_imageindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageindex());
    }

  }
  // repeated .hoolai.skeleton.skeleton.container.image images = 2;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton_container::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton_container*>(&from));
}

void skeleton_container::MergeFrom(const skeleton_container& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_.MergeFrom(from.images_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_imageindex()) {
      set_imageindex(from.imageindex());
    }
  }
}

void skeleton_container::CopyFrom(const skeleton_container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_container::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < images_size(); i++) {
    if (!this->images(i).IsInitialized()) return false;
  }
  return true;
}

void skeleton_container::Swap(skeleton_container* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    images_.Swap(&other->images_);
    std::swap(imageindex_, other->imageindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton_container::GetTypeName() const {
  return "hoolai.skeleton.skeleton.container";
}


void skeleton_container::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton_container\n");
  printf("{\n");
  printf("name : %s\n", name().c_str());
  printf("images : [\n");
  for(int i = 0; i < images_size(); ++i) {
    images(i).printDebugInfo();
  }
  printf("]\n");
  printf("imageindex : %d\n", imageindex());
  printf("}\n");
#endif
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int skeleton_image::kNameFieldNumber;
const int skeleton_image::kPathFieldNumber;
const int skeleton_image::kWidthFieldNumber;
const int skeleton_image::kHeightFieldNumber;
const int skeleton_image::kAtlasFieldNumber;
#endif  // !_MSC_VER

skeleton_image::skeleton_image()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton_image::InitAsDefaultInstance() {
}

skeleton_image::skeleton_image(const skeleton_image& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton_image::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 0;
  height_ = 0;
  atlas_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton_image::~skeleton_image() {
  SharedDtor();
}

void skeleton_image::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (atlas_ != &::google::protobuf::internal::kEmptyString) {
    delete atlas_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton_image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton_image& skeleton_image::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton_image* skeleton_image::default_instance_ = NULL;

skeleton_image* skeleton_image::New() const {
  return new skeleton_image;
}

void skeleton_image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    width_ = 0;
    height_ = 0;
    if (has_atlas()) {
      if (atlas_ != &::google::protobuf::internal::kEmptyString) {
        atlas_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton_image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // required float width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // required float height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_atlas;
        break;
      }

      // optional string atlas = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atlas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atlas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton_image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // required float width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // required float height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // optional string atlas = 5;
  if (has_atlas()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->atlas(), output);
  }

}

int skeleton_image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required float width = 3;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // required float height = 4;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional string atlas = 5;
    if (has_atlas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atlas());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton_image::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton_image*>(&from));
}

void skeleton_image::MergeFrom(const skeleton_image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_atlas()) {
      set_atlas(from.atlas());
    }
  }
}

void skeleton_image::CopyFrom(const skeleton_image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_image::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void skeleton_image::Swap(skeleton_image* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(atlas_, other->atlas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton_image::GetTypeName() const {
  return "hoolai.skeleton.skeleton.image";
}


void skeleton_image::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton_image\n");
  printf("{\n");
  printf("name : %s\n", name().c_str());
  printf("path : %s\n", path().c_str());
  printf("width : %f\n", width());
  printf("height : %f\n", height());
  printf("atlas : %s\n", atlas().c_str());
  printf("}\n");
#endif
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int skeleton_position::kNameFieldNumber;
const int skeleton_position::kXFieldNumber;
const int skeleton_position::kYFieldNumber;
#endif  // !_MSC_VER

skeleton_position::skeleton_position()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton_position::InitAsDefaultInstance() {
}

skeleton_position::skeleton_position(const skeleton_position& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton_position::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton_position::~skeleton_position() {
  SharedDtor();
}

void skeleton_position::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton_position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton_position& skeleton_position::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton_position* skeleton_position::default_instance_ = NULL;

skeleton_position* skeleton_position::New() const {
  return new skeleton_position;
}

void skeleton_position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton_position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton_position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

}

int skeleton_position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton_position::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton_position*>(&from));
}

void skeleton_position::MergeFrom(const skeleton_position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void skeleton_position::CopyFrom(const skeleton_position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton_position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void skeleton_position::Swap(skeleton_position* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton_position::GetTypeName() const {
  return "hoolai.skeleton.skeleton.position";
}


void skeleton_position::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton_position\n");
  printf("{\n");
  printf("name : %s\n", name().c_str());
  printf("x : %f\n", x());
  printf("y : %f\n", y());
  printf("}\n");
#endif
}

// -------------------------------------------------------------------

#ifndef _MSC_VER
const int skeleton::kAnimationsFieldNumber;
const int skeleton::kBonesFieldNumber;
const int skeleton::kContianersFieldNumber;
const int skeleton::kImagesFieldNumber;
const int skeleton::kPositionsFieldNumber;
#endif  // !_MSC_VER

skeleton::skeleton()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void skeleton::InitAsDefaultInstance() {
}

skeleton::skeleton(const skeleton& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void skeleton::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skeleton::~skeleton() {
  SharedDtor();
}

void skeleton::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void skeleton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const skeleton& skeleton::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_skeleton_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_skeleton_2eproto();
#endif
  return *default_instance_;
}

skeleton* skeleton::default_instance_ = NULL;

skeleton* skeleton::New() const {
  return new skeleton;
}

void skeleton::Clear() {
  animations_.Clear();
  bones_.Clear();
  contianers_.Clear();
  images_.Clear();
  positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool skeleton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hoolai.skeleton.skeleton.animation animations = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_animations;
        if (input->ExpectTag(18)) goto parse_bones;
        break;
      }

      // repeated .hoolai.skeleton.skeleton.bone bones = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bones;
        if (input->ExpectTag(26)) goto parse_contianers;
        break;
      }

      // repeated .hoolai.skeleton.skeleton.container contianers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contianers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contianers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contianers;
        if (input->ExpectTag(34)) goto parse_images;
        break;
      }

      // repeated .hoolai.skeleton.skeleton.image images = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_images;
        if (input->ExpectTag(42)) goto parse_positions;
        break;
      }

      // repeated .hoolai.skeleton.skeleton.position positions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_positions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skeleton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .hoolai.skeleton.skeleton.animation animations = 1;
  for (int i = 0; i < this->animations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->animations(i), output);
  }

  // repeated .hoolai.skeleton.skeleton.bone bones = 2;
  for (int i = 0; i < this->bones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->bones(i), output);
  }

  // repeated .hoolai.skeleton.skeleton.container contianers = 3;
  for (int i = 0; i < this->contianers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->contianers(i), output);
  }

  // repeated .hoolai.skeleton.skeleton.image images = 4;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->images(i), output);
  }

  // repeated .hoolai.skeleton.skeleton.position positions = 5;
  for (int i = 0; i < this->positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->positions(i), output);
  }

}

int skeleton::ByteSize() const {
  int total_size = 0;

  // repeated .hoolai.skeleton.skeleton.animation animations = 1;
  total_size += 1 * this->animations_size();
  for (int i = 0; i < this->animations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animations(i));
  }

  // repeated .hoolai.skeleton.skeleton.bone bones = 2;
  total_size += 1 * this->bones_size();
  for (int i = 0; i < this->bones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bones(i));
  }

  // repeated .hoolai.skeleton.skeleton.container contianers = 3;
  total_size += 1 * this->contianers_size();
  for (int i = 0; i < this->contianers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contianers(i));
  }

  // repeated .hoolai.skeleton.skeleton.image images = 4;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  // repeated .hoolai.skeleton.skeleton.position positions = 5;
  total_size += 1 * this->positions_size();
  for (int i = 0; i < this->positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skeleton::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const skeleton*>(&from));
}

void skeleton::MergeFrom(const skeleton& from) {
  GOOGLE_CHECK_NE(&from, this);
  animations_.MergeFrom(from.animations_);
  bones_.MergeFrom(from.bones_);
  contianers_.MergeFrom(from.contianers_);
  images_.MergeFrom(from.images_);
  positions_.MergeFrom(from.positions_);
}

void skeleton::CopyFrom(const skeleton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skeleton::IsInitialized() const {

  for (int i = 0; i < animations_size(); i++) {
    if (!this->animations(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bones_size(); i++) {
    if (!this->bones(i).IsInitialized()) return false;
  }
  for (int i = 0; i < contianers_size(); i++) {
    if (!this->contianers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < images_size(); i++) {
    if (!this->images(i).IsInitialized()) return false;
  }
  for (int i = 0; i < positions_size(); i++) {
    if (!this->positions(i).IsInitialized()) return false;
  }
  return true;
}

void skeleton::Swap(skeleton* other) {
  if (other != this) {
    animations_.Swap(&other->animations_);
    bones_.Swap(&other->bones_);
    contianers_.Swap(&other->contianers_);
    images_.Swap(&other->images_);
    positions_.Swap(&other->positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string skeleton::GetTypeName() const {
  return "hoolai.skeleton.skeleton";
}


void skeleton::printDebugInfo() const 
{
#ifdef DEBUG
  printf("skeleton\n");
  printf("{\n");
  printf("animations : [\n");
  for(int i = 0; i < animations_size(); ++i) {
    animations(i).printDebugInfo();
  }
  printf("]\n");
  printf("bones : [\n");
  for(int i = 0; i < bones_size(); ++i) {
    bones(i).printDebugInfo();
  }
  printf("]\n");
  printf("contianers : [\n");
  for(int i = 0; i < contianers_size(); ++i) {
    contianers(i).printDebugInfo();
  }
  printf("]\n");
  printf("images : [\n");
  for(int i = 0; i < images_size(); ++i) {
    images(i).printDebugInfo();
  }
  printf("]\n");
  printf("positions : [\n");
  for(int i = 0; i < positions_size(); ++i) {
    positions(i).printDebugInfo();
  }
  printf("]\n");
  printf("}\n");
#endif
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace skeleton
}  // namespace hoolai

// @@protoc_insertion_point(global_scope)
